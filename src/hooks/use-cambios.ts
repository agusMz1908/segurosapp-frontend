import { useState, useCallback } from 'react';
import { toast } from 'react-hot-toast';
import { getAuthHeaders, getAuthHeadersForFormData, getAuthToken, handle401Error } from '../utils/auth-utils';

// ===================== INTERFACES =====================

interface CambiosState {
  currentStep: number;
  isLoading: boolean;
  
  context: {
    clienteId?: number;
    seccionId?: number;
    clienteInfo?: any;
    polizaOriginal?: any;
    companiaId?: number;
    companiaInfo?: any;
  };
  
  cliente: {
    selectedId?: number;
    polizas: any[];
    selectedPoliza?: any;
  };
  
  file: {
    selected: File | null;
    uploaded: boolean;
    scanId: number | null;
    uploadProgress: number;
  };
  
  scan: {
    status: 'idle' | 'uploading' | 'scanning' | 'completed' | 'error';
    scanId?: number;
    extractedData: any;
    mappedData: any;
    normalizedData: any;
    completionPercentage: number;
    confidence: number;
    requiresAttention: any[];
    errorMessage?: string;
    fileName?: string;
    file?: File;
  };
  
  masterData: {
    combustibleId: string;
    categoriaId: string;
    destinoId: string;
    departamentoId: string;
    calidadId: string;
    tarifaId: string;
    cantidadCuotas: number;
    observaciones: string;
    [key: string]: any;
  };
  
  processCompleted: boolean;
  processResult?: any;
}

// ===================== ESTADO INICIAL =====================

const initialState: CambiosState = {
  currentStep: 1,
  isLoading: false,
  context: {},
  cliente: {
    polizas: []
  },
  file: {
    selected: null,
    uploaded: false,
    scanId: null,
    uploadProgress: 0
  },
  scan: {
    status: 'idle',
    extractedData: {},
    mappedData: {},
    normalizedData: {},
    completionPercentage: 0,
    confidence: 0,
    requiresAttention: []
  },
  masterData: {
    combustibleId: '',
    categoriaId: '',
    destinoId: '',
    departamentoId: '',
    calidadId: '',
    tarifaId: '',
    cantidadCuotas: 1,
    observaciones: ''
  },
  processCompleted: false
};

// ===================== FUNCIONES DE LIMPIEZA =====================

const cleanText = (str: string) => {
  if (!str) return "";
  return str.replace(/\n/g, ' ').replace(/\r/g, ' ').trim();
};

const cleanVehicleField = (str: string) => {
  if (!str) return "";
  
  let cleaned = str.replace(/\n/g, ' ').replace(/\r/g, ' ').trim();
  
  const prefixes = [
    'MARCA\n', 'MODELO\n', 'MOTOR\n', 'CHASIS\n', 'A√ëO\n',
    'MARCA ', 'MODELO ', 'MOTOR ', 'CHASIS ', 'A√ëO ',
    'Marca\n', 'Modelo\n', 'Motor\n', 'Chasis\n', 'A√±o\n',
    'Marca ', 'Modelo ', 'Motor ', 'Chasis ', 'A√±o ',
    'Color\n', 'Color ', 'Tipo\n', 'Tipo ',
    'Riesgo nro.\n', 'Riesgo nro. ',
    'Tipo de uso\n', 'Tipo de uso '
  ];
  
  for (const prefix of prefixes) {
    if (cleaned.startsWith(prefix)) {
      cleaned = cleaned.substring(prefix.length).trim();
      break;
    }
  }
  
  cleaned = cleaned.replace(/^:\s*/, '').trim();
  return cleaned;
};

const cleanPatenteField = (str: string) => {
  if (!str) return "";
  
  let cleaned = str.replace(/\n/g, ' ').replace(/\r/g, ' ').trim();
  
  const patentesPrefixes = [
    'MATR√çCULA: ', 'MATR√çCULA. ', 'MATR√çCULA ',
    'PATENTE: ', 'PATENTE. ', 'PATENTE ',
    'Matr√≠cula: ', 'Matr√≠cula. ', 'Matr√≠cula ',
    'Patente: ', 'Patente. ', 'Patente '
  ];
  
  for (const prefix of patentesPrefixes) {
    if (cleaned.startsWith(prefix)) {
      cleaned = cleaned.substring(prefix.length).trim();
      break;
    }
  }
  
  return cleaned;
};

// ===================== FUNCI√ìN DE MAPEO =====================

const mapBackendDataToFrontend = (backendData: any, extractedData: any) => {
  console.log('üîß CAMBIOS - mapBackendDataToFrontend iniciado:', { backendData, extractedData });
  
  const findFieldValue = (keys: string[]) => {
    for (const key of keys) {
      if (extractedData[key] && extractedData[key].toString().trim()) {
        return extractedData[key];
      }
    }
    return null;
  };

  const result = {
    vehiculoMarca: (() => {
      const conSalto = findFieldValue(["vehiculo.marca"]) || "";
      if (conSalto) {
        const cleaned = cleanVehicleField(conSalto.toString());
        if (cleaned) return cleaned;
      }
      
      const sinSalto = findFieldValue(["vehiculoMarca", "vehiculo_marca"]) || "";
      if (sinSalto) {
        const cleaned = cleanVehicleField(sinSalto.toString());
        if (cleaned) return cleaned;
      }
      
      if (backendData.vehiculoMarca) {
        return cleanVehicleField(backendData.vehiculoMarca.toString());
      }
      
      return "";
    })(),

    vehiculoModelo: (() => {
      const conSalto = findFieldValue(["vehiculo.modelo"]) || "";
      if (conSalto) {
        const cleaned = cleanVehicleField(conSalto.toString());
        if (cleaned) return cleaned;
      }
      
      const sinSalto = findFieldValue(["vehiculoModelo", "vehiculo_modelo"]) || "";
      if (sinSalto) {
        const cleaned = cleanVehicleField(sinSalto.toString());
        if (cleaned) return cleaned;
      }
      
      if (backendData.vehiculoModelo) {
        return cleanVehicleField(backendData.vehiculoModelo.toString());
      }
      
      return "";
    })(),

    vehiculoAno: (() => {
      if (backendData.vehiculoA√±o?.toString()) return backendData.vehiculoA√±o.toString();
      
      const conSalto = findFieldValue(["vehiculo.anio"]) || "";
      if (conSalto) return cleanVehicleField(conSalto.toString());
      
      const sinSalto = findFieldValue(["vehiculoAno", "vehiculo_anio"]) || "";
      return cleanVehicleField(sinSalto.toString());
    })(),

    vehiculoChasis: (() => {
      if (backendData.vehiculoChasis) return backendData.vehiculoChasis;
      
      const conSalto = findFieldValue(["vehiculo.chasis"]) || "";
      if (conSalto) return cleanVehicleField(conSalto.toString());
      
      const sinSalto = findFieldValue(["vehiculoChasis", "vehiculo_chasis"]) || "";
      return cleanVehicleField(sinSalto.toString());
    })(),

    vehiculoMotor: (() => {
      if (backendData.vehiculoMotor) return backendData.vehiculoMotor;
      
      const conSalto = findFieldValue(["vehiculo.motor"]) || "";
      if (conSalto) return cleanVehicleField(conSalto.toString());
      
      const sinSalto = findFieldValue(["vehiculoMotor", "vehiculo_motor"]) || "";
      return cleanVehicleField(sinSalto.toString());
    })(),

    vehiculoPatente: (() => {
      if (backendData.vehiculoPatente) return backendData.vehiculoPatente;
      
      const conSalto = findFieldValue(["vehiculo.matricula"]) || "";
      if (conSalto) return cleanPatenteField(conSalto.toString());
      
      const sinSalto = findFieldValue(["vehiculoPatente", "vehiculo_matricula", "matricula", "patente"]) || "";
      return cleanPatenteField(sinSalto.toString());
    })(),

    aseguradoNombre: backendData.aseguradoNombre || 
                     cleanText(findFieldValue(["asegurado.nombre"]) || "") || "",
    
    aseguradoDocumento: backendData.aseguradoDocumento || 
                        cleanText(findFieldValue(["conductor.cedula", "asegurado.documento", "asegurado.ci"]) || "") || "",
    
    aseguradoTelefono: cleanText(findFieldValue(["asegurado.telefono"]) || "") || "",
    
    aseguradoDireccion: cleanText(findFieldValue(["asegurado.direccion"]) || "") || "",
    
    aseguradoDepartamento: cleanText(findFieldValue(["asegurado.departamento"]) || "") || "",

    polizaNumero: backendData.polizaNumero || 
                  cleanText(findFieldValue(["poliza.numero", "numero_poliza"]) || "") || "",
    
    polizaVigenciaDesde: backendData.polizaVigenciaDesde || 
                         cleanText(findFieldValue(["poliza.vigencia_desde", "fecha_desde"]) || "") || "",
    
    polizaVigenciaHasta: backendData.polizaVigenciaHasta || 
                         cleanText(findFieldValue(["poliza.vigencia_hasta", "fecha_hasta"]) || "") || "",
    
    polizaPremio: backendData.polizaPremio || 
                  cleanText(findFieldValue(["poliza.premio", "premio_total"]) || "") || "",

    modalidad: cleanText(findFieldValue(["poliza.modalidad"]) || "") || "",
    tipoMovimiento: cleanText(findFieldValue(["poliza.tipo_movimiento"]) || "") || ""
  };

  console.log('‚úÖ CAMBIOS - mapBackendDataToFrontend resultado:', result);
  return result;
};

// ===================== HOOK PRINCIPAL =====================

export function useCambios() {
  const [state, setState] = useState<CambiosState>(initialState);

  const updateState = useCallback((updates: any) => {
    if (typeof updates === 'function') {
      setState(updates);
    } else {
      setState(prev => ({
        ...prev,
        ...updates
      }));
    }
  }, []);

  // ===================== CARGAR P√ìLIZAS =====================

  const loadPolizasByCliente = useCallback(async (clienteId: number) => {
    setState(prev => ({ ...prev, isLoading: true }));
    
    try {
      console.log('Cargando p√≥lizas vigentes para cambios - cliente:', clienteId);
      
      const token = getAuthToken();
      if (!token) {
        throw new Error('No se encontr√≥ token de autenticaci√≥n');
      }

      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'https://localhost:7202';
      const response = await fetch(`${API_URL}/api/MasterData/clientes/${clienteId}/polizas?soloActivos=true`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        if (response.status === 401) {
          handle401Error();
          throw new Error('Error de autenticaci√≥n');
        }
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }

      const polizasData = await response.json();
      console.log('Respuesta del API:', polizasData);

      let polizasList: any[] = [];
      
      if (Array.isArray(polizasData)) {
        polizasList = polizasData;
      } else if (polizasData && polizasData.data && Array.isArray(polizasData.data)) {
        polizasList = polizasData.data;
      } else if (polizasData && polizasData.polizas && Array.isArray(polizasData.polizas)) {
        polizasList = polizasData.polizas;
      } else {
        console.error('Formato de respuesta inesperado:', polizasData);
        throw new Error('El API no devolvi√≥ un array de p√≥lizas v√°lido');
      }

      const now = new Date();
      const polizasVigentes = polizasList.filter((poliza: any) => {
        if (poliza.seccod !== 4) {
          console.log(`P√≥liza ${poliza.conpol} EXCLUIDA - No es de automotor (secci√≥n: ${poliza.seccod})`);
          return false;
        }

        let diasHastaVencimiento = 0;
        try {
          const fechaVencimiento = new Date(poliza.confchhas);
          diasHastaVencimiento = Math.ceil((fechaVencimiento.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
        } catch (error) {
          console.error(`Error parseando fecha para p√≥liza ${poliza.conpol}:`, error);
          return false;
        }
        
        const esVigenteParaCambios = diasHastaVencimiento >= -30;
        
        if (!esVigenteParaCambios) {
          console.log(`P√≥liza ${poliza.conpol} EXCLUIDA - Vencida hace m√°s de 30 d√≠as`);
        } else {
          console.log(`P√≥liza ${poliza.conpol} INCLUIDA - Vigente para cambios`);
        }
        
        return esVigenteParaCambios;
      });

      setState(prev => ({
        ...prev,
        cliente: {
          ...prev.cliente,
          selectedId: clienteId,
          polizas: polizasVigentes
        },
        isLoading: false
      }));

      if (polizasVigentes.length === 0) {
        toast('Este cliente no tiene p√≥lizas de automotor vigentes disponibles para cambios', {
          icon: '‚ÑπÔ∏è',
          duration: 4000,
        });
      } else {
        toast.success(`Se encontraron ${polizasVigentes.length} p√≥lizas vigentes`);
      }

      return polizasVigentes;
    } catch (error: any) {
      console.error('Error cargando p√≥lizas vigentes:', error);
      toast.error('Error cargando p√≥lizas vigentes: ' + (error.message || 'Error desconocido'));
      
      setState(prev => ({ 
        ...prev, 
        cliente: {
          ...prev.cliente,
          selectedId: clienteId,
          polizas: []
        },
        isLoading: false 
      }));
      
      return [];
    }
  }, []);

  // ===================== SELECCIONAR P√ìLIZA =====================

const selectPolizaForChange = useCallback((poliza: any) => {
  console.log('üîß Seleccionando p√≥liza para cambio:', poliza);
  
  setState(prevState => {
    // üî• PRESERVAR: Informaci√≥n completa del cliente existente
    const clienteInfoCompleta = prevState.context.clienteInfo || {
      id: prevState.cliente.selectedId!,
      nombre: `Cliente ${prevState.cliente.selectedId}`,
      documento: 'No especificado',
      activo: true
    };

    return {
      ...prevState,
      cliente: {
        ...prevState.cliente,
        selectedPoliza: poliza
      },
      context: {
        ...prevState.context,
        polizaOriginalId: poliza.id || poliza.Id,
        companiaId: poliza.comcod || poliza.companiaId,
        seccionId: poliza.seccod,
        clienteInfo: clienteInfoCompleta, // üî• MANTENER: Info completa
        companiaInfo: {                      
          id: poliza.comcod || poliza.companiaId || 1,
          nombre: poliza.compania_nombre || poliza.comnom || 'Compa√±√≠a no especificada',
          codigo: poliza.comcod || poliza.companiaId || 1
        },
        seccionInfo: {
          id: poliza.seccod,
          nombre: poliza.seccion_nombre || 'Automotor'
        },
        polizaOriginal: {
          id: poliza.id || poliza.Id,
          numero: poliza.conpol,
          vencimiento: poliza.confchhas,
          compania: poliza.compania_nombre || poliza.comnom || 'Sin especificar'
        }
      }
    };
  });

  toast.success(`P√≥liza ${poliza.conpol} seleccionada para cambio`);
}, []);

  // ===================== UPLOAD DE DOCUMENTO =====================

  const uploadDocumentForChange = useCallback(async (file: File): Promise<boolean> => {
    console.log('üîÑ CAMBIOS - Iniciando upload espec√≠fico');
    
    if (!state.context.clienteId || !state.context.seccionId || !state.context.companiaId) {
      console.error('‚ùå Contexto incompleto:', {
        clienteId: state.context.clienteId,
        seccionId: state.context.seccionId,
        companiaId: state.context.companiaId
      });
      toast.error('Contexto incompleto. Selecciona cliente y p√≥liza correctamente.');
      return false;
    }

    try {
      const token = getAuthToken();
      if (!token) {
        throw new Error('No hay token de autenticaci√≥n');
      }

      updateState({
        isLoading: true,
        file: { 
          selected: file, 
          uploaded: false, 
          scanId: null, 
          uploadProgress: 0 
        },
        scan: { 
          ...state.scan, 
          status: 'uploading', 
          fileName: file.name, 
          errorMessage: undefined 
        }
      });

      const formData = new FormData();
      formData.append('file', file);
      formData.append('clienteId', state.context.clienteId.toString());
      formData.append('companiaId', state.context.companiaId.toString());
      formData.append('seccionId', state.context.seccionId.toString());
      formData.append('notes', 'Cambio de p√≥liza');

      updateState({
        file: {
          selected: file,
          uploaded: false,
          scanId: null,
          uploadProgress: 50,
        },
        scan: {
          ...state.scan,
          status: 'scanning',
        }
      });

      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'https://localhost:7202';
      const response = await fetch(`${API_URL}/api/Document/upload-with-context`, {
        method: 'POST',
        headers: getAuthHeadersForFormData(),
        body: formData,
      });

      if (!response.ok) {
        let errorMessage = `Error ${response.status}: ${response.statusText}`;
        
        try {
          const errorData = await response.json();
          errorMessage = errorData.message || errorData.Message || errorMessage;
        } catch {
          const errorText = await response.text();
          if (errorText) errorMessage = errorText;
        }
        
        if (response.status === 401) {
          handle401Error();
          return false;
        }
        
        throw new Error(errorMessage);
      }

      const result = await response.json();
      console.log('‚úÖ CAMBIOS - Respuesta del servidor:', result);

      // ‚úÖ NUEVO: Procesamiento de datos con limpieza
      const scanResult = result.scanResult || {};
      const polizaMapping = result.polizaMapping || {};
      
      const originalExtractedData = scanResult.extractedData || {};
      const normalizedData = polizaMapping.normalizedData || {};
      const mappedData = polizaMapping.mappedData || {};

      console.log('üîç CAMBIOS - Datos extra√≠dos:', {
        original: Object.keys(originalExtractedData).length,
        normalized: Object.keys(normalizedData).length,
        mapped: Object.keys(mappedData).length,
      });

      // ‚úÖ NUEVO: Usar datos normalizados si est√°n disponibles
      const dataForDisplay = Object.keys(normalizedData).length > 0
        ? normalizedData 
        : originalExtractedData;

      // ‚úÖ NUEVO: Log de comparaci√≥n de limpieza
      if (Object.keys(normalizedData).length > 0) {
        console.log('üîÑ CAMBIOS === COMPARACI√ìN ANTES/DESPU√âS DE LIMPIEZA ===');
        
        const vehicleFields = ['vehiculo.marca', 'vehiculo.modelo', 'vehiculo.matricula'];
        vehicleFields.forEach(field => {
          const original = originalExtractedData[field];
          const normalized = normalizedData[field];
          
          if (original && normalized && original !== normalized) {
            console.log(`‚úÖ CAMBIOS - ${field}:`);
            console.log(`   Antes: "${original}"`);
            console.log(`   Despu√©s: "${normalized}"`);
          }
        });
      }

const displayData = mapBackendDataToFrontend(
  mappedData, 
  dataForDisplay || {}
);

if (displayData.vehiculoMarca) {
  console.log('üöó CAMBIOS - Marca limpiada:', {
    antes: dataForDisplay['vehiculo.marca'],
    despu√©s: displayData.vehiculoMarca
  });
}

if (displayData.vehiculoModelo) {
  console.log('üöó CAMBIOS - Modelo limpiado:', {
    antes: dataForDisplay['vehiculo.modelo'], 
    despu√©s: displayData.vehiculoModelo
  });
}

      // ‚úÖ NUEVO: Combinar datos limpios
      const combinedExtractedData = {
        ...dataForDisplay,
        ...displayData
      };

      // Detectar compa√±√≠a autom√°ticamente
      let companiaDetectada = state.context.companiaInfo;
      let companiaIdDetectada = state.context.companiaId;

      if (result.preSelection?.compania && result.preSelection.compania.id) {
        companiaIdDetectada = result.preSelection.compania.id;
        companiaDetectada = {
          id: result.preSelection.compania.id,
          nombre: result.preSelection.compania.displayName || result.preSelection.compania.comnom || 'Detectada',
          codigo: result.preSelection.compania.shortCode || result.preSelection.compania.comalias || 'DET'
        };
        console.log('üè¢ CAMBIOS - Compa√±√≠a detectada autom√°ticamente:', companiaDetectada);
      }

      updateState({
        context: {
          ...state.context,
          companiaId: companiaIdDetectada,
          companiaInfo: companiaDetectada,
        },
        file: {
          selected: file,
          uploaded: true,
          scanId: scanResult.scanId,
          uploadProgress: 100,
        },
        scan: {
          status: 'completed' as const,
          extractedData: combinedExtractedData, // ‚úÖ CAMBIO: Usar datos limpios
          normalizedData: normalizedData,
          mappedData: mappedData,
          completionPercentage: polizaMapping.metrics?.completionPercentage || 85,
          confidence: polizaMapping.metrics?.confidence || 85,
          requiresAttention: polizaMapping.issues?.map((issue: any) => ({
            fieldName: issue.fieldName || 'unknown',
            reason: issue.description || issue.issueType || 'Requiere verificaci√≥n',
            severity: issue.severity?.toLowerCase() || 'warning'
          })) || [],
          fileName: file.name,
          scanId: scanResult.scanId,
          errorMessage: undefined,
        },
        isLoading: false,
      });

      toast.success(`Documento procesado exitosamente (${polizaMapping.metrics?.completionPercentage || 85}% confianza)`);
      return true;

    } catch (error: any) {
      console.error('‚ùå CAMBIOS - Error en upload:', error);
      
      updateState({
        file: {
          selected: file,
          uploaded: false,
          scanId: null,
          uploadProgress: 0,
        },
        scan: {
          ...state.scan,
          status: 'error',
          errorMessage: error.message || 'Error procesando documento'
        },
        isLoading: false,
      });

      toast.error('Error procesando documento: ' + (error.message || 'Error desconocido'));
      return false;
    }
  }, [state.context, state.scan, updateState]);

  // ===================== OTRAS FUNCIONES =====================

const setClienteData = useCallback((cliente: any) => {
  console.log('üîß CAMBIOS - setClienteData recibido:', cliente);
  
  setState(prev => ({
    ...prev,
    context: {
      ...prev.context,
      clienteId: cliente.id,
      clienteInfo: {
        id: cliente.id,
        nombre: cliente.nombre || cliente.displayName || `Cliente ${cliente.id}`,
        documento: cliente.documento || 'No especificado',
        documentType: cliente.documentType,
        email: cliente.email,
        telefono: cliente.telefono,
        direccion: cliente.direccion,
        activo: cliente.activo !== undefined ? cliente.activo : true, // üî• PRESERVAR estado
        displayName: cliente.displayName,
        contactInfo: cliente.contactInfo
      }
    }
  }));
}, []);

  const updateExtractedData = useCallback((updates: any) => {
    setState(prev => ({
      ...prev,
      scan: {
        ...prev.scan,
        extractedData: { ...prev.scan.extractedData, ...updates }
      }
    }));
  }, []);

  const updateMasterData = useCallback((updates: any) => {
    setState(prev => ({
      ...prev,
      masterData: { ...prev.masterData, ...updates }
    }));
  }, []);

  const markProcessCompleted = useCallback((result: any) => {
    setState(prev => ({
      ...prev,
      processCompleted: true,
      processResult: result
    }));
  }, []);

  // ===================== NAVEGACI√ìN =====================

  const nextStep = useCallback(() => {
    setState(prev => ({ ...prev, currentStep: Math.min(prev.currentStep + 1, 4) }));
  }, []);

  const prevStep = useCallback(() => {
    setState(prev => ({ ...prev, currentStep: Math.max(prev.currentStep - 1, 1) }));
  }, []);

  const reset = useCallback(() => {
    setState(initialState);
    toast.success('Sistema de cambios reiniciado');
  }, []);

  // ===================== VALIDACIONES =====================

  const canProceedToStep2 = useCallback(() => {
    return !!(state.context.clienteId && state.context.seccionId && state.cliente.selectedPoliza);
  }, [state.context.clienteId, state.context.seccionId, state.cliente.selectedPoliza]);

  const canProceedToStep3 = useCallback(() => {
    return !!(state.scan.status === 'completed' && state.file.uploaded);
  }, [state.scan.status, state.file.uploaded]);

  const canProceedToStep4 = useCallback(() => {
    const hasExtractedData = state.scan.extractedData && Object.keys(state.scan.extractedData).length > 0;
    const hasMasterData = state.masterData.combustibleId && state.masterData.categoriaId;
    return !!(hasExtractedData && hasMasterData);
  }, [state.scan.extractedData, state.masterData.combustibleId, state.masterData.categoriaId]);

  // ===================== RETURN =====================

  return {
    state,
    updateState,
    loadPolizasByCliente,
    selectPolizaForChange,
    setClienteData,
    uploadDocumentForChange,
    updateExtractedData, 
    updateMasterData,    
    markProcessCompleted,
    nextStep,
    prevStep,
    reset,
    canProceedToStep2,
    canProceedToStep3,
    canProceedToStep4
  };
}